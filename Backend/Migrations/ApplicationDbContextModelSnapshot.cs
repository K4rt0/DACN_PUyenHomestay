// <auto-generated />
using System;
using Backend.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Branch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("district")
                        .HasColumnType("longtext");

                    b.Property<bool>("is_locked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("province")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.Property<string>("ward")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("Backend.Models.BranchContact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("contact_icon")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.HasKey("id");

                    b.ToTable("branch_contacts");
                });

            modelBuilder.Entity("Backend.Models.BranchContactDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("branch_contactid")
                        .HasColumnType("int");

                    b.Property<int?>("branchid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<bool>("is_locked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.Property<string>("value")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("branch_contactid");

                    b.HasIndex("branchid");

                    b.ToTable("branch_contact_details");
                });

            modelBuilder.Entity("Backend.Models.FacilitiesRoom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<int?>("facilityid")
                        .HasColumnType("int");

                    b.Property<bool>("is_bed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int?>("roomid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.HasKey("id");

                    b.HasIndex("facilityid");

                    b.HasIndex("roomid");

                    b.ToTable("facilities_rooms");
                });

            modelBuilder.Entity("Backend.Models.Facility", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<string>("icon")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.HasKey("id");

                    b.ToTable("facilities");
                });

            modelBuilder.Entity("Backend.Models.Reservation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("check_in")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("check_out")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<int>("guest_amount")
                        .HasColumnType("int");

                    b.Property<int>("payment_method")
                        .HasColumnType("int");

                    b.Property<string>("reason_cancel")
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<decimal>("total_price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("Backend.Models.ReservationDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int?>("reservationid")
                        .HasColumnType("int");

                    b.Property<int?>("roomid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.HasKey("id");

                    b.HasIndex("reservationid");

                    b.HasIndex("roomid");

                    b.ToTable("reservation_details");
                });

            modelBuilder.Entity("Backend.Models.Review", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("branchid")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<byte>("rating")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("branchid");

                    b.HasIndex("userid");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("Backend.Models.Room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("branchid")
                        .HasColumnType("int");

                    b.Property<decimal>("cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<int>("room_number")
                        .HasColumnType("int");

                    b.Property<int>("room_width")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.HasKey("id");

                    b.HasIndex("branchid");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Backend.Models.RoomImage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<int?>("roomid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.Property<string>("url")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("roomid");

                    b.ToTable("room_images");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateOnly?>("birthday")
                        .HasColumnType("date");

                    b.Property<int?>("branchid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime?>("created_at"));

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("full_name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("identifier")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("is_locked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_verified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("phone_number")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("reward_points")
                        .HasColumnType("int");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("updated_at"));

                    b.HasKey("id");

                    b.HasIndex("branchid");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Backend.Models.VietnamProvinces.District", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("code_name")
                        .HasColumnType("longtext");

                    b.Property<string>("full_name")
                        .HasColumnType("longtext");

                    b.Property<string>("full_name_en")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("name_en")
                        .HasColumnType("longtext");

                    b.Property<int?>("provinceid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("provinceid");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("Backend.Models.VietnamProvinces.Province", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("code_name")
                        .HasColumnType("longtext");

                    b.Property<string>("full_name")
                        .HasColumnType("longtext");

                    b.Property<string>("full_name_en")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("name_en")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("provinces");
                });

            modelBuilder.Entity("Backend.Models.VietnamProvinces.Ward", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("code_name")
                        .HasColumnType("longtext");

                    b.Property<int?>("districtid")
                        .HasColumnType("int");

                    b.Property<string>("full_name")
                        .HasColumnType("longtext");

                    b.Property<string>("full_name_en")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("name_en")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("districtid");

                    b.ToTable("wards");
                });

            modelBuilder.Entity("Backend.Models.BranchContactDetail", b =>
                {
                    b.HasOne("Backend.Models.BranchContact", "branch_contact")
                        .WithMany("branch_contact_details")
                        .HasForeignKey("branch_contactid");

                    b.HasOne("Backend.Models.Branch", "branch")
                        .WithMany("branch_contact_details")
                        .HasForeignKey("branchid");

                    b.Navigation("branch");

                    b.Navigation("branch_contact");
                });

            modelBuilder.Entity("Backend.Models.FacilitiesRoom", b =>
                {
                    b.HasOne("Backend.Models.Facility", "facility")
                        .WithMany("facilities_rooms")
                        .HasForeignKey("facilityid");

                    b.HasOne("Backend.Models.Room", "room")
                        .WithMany("facilities_rooms")
                        .HasForeignKey("roomid");

                    b.Navigation("facility");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Backend.Models.Reservation", b =>
                {
                    b.HasOne("Backend.Models.User", "user")
                        .WithMany("reservations")
                        .HasForeignKey("userid");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.ReservationDetail", b =>
                {
                    b.HasOne("Backend.Models.Reservation", "reservation")
                        .WithMany("reservation_details")
                        .HasForeignKey("reservationid");

                    b.HasOne("Backend.Models.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomid");

                    b.Navigation("reservation");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Backend.Models.Review", b =>
                {
                    b.HasOne("Backend.Models.Branch", "branch")
                        .WithMany("reviews")
                        .HasForeignKey("branchid");

                    b.HasOne("Backend.Models.User", "user")
                        .WithMany("reviews")
                        .HasForeignKey("userid");

                    b.Navigation("branch");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.Room", b =>
                {
                    b.HasOne("Backend.Models.Branch", "branch")
                        .WithMany("rooms")
                        .HasForeignKey("branchid");

                    b.Navigation("branch");
                });

            modelBuilder.Entity("Backend.Models.RoomImage", b =>
                {
                    b.HasOne("Backend.Models.Room", "room")
                        .WithMany("room_images")
                        .HasForeignKey("roomid");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.Branch", "branch")
                        .WithMany("users")
                        .HasForeignKey("branchid");

                    b.Navigation("branch");
                });

            modelBuilder.Entity("Backend.Models.VietnamProvinces.District", b =>
                {
                    b.HasOne("Backend.Models.VietnamProvinces.Province", "province")
                        .WithMany("districts")
                        .HasForeignKey("provinceid");

                    b.Navigation("province");
                });

            modelBuilder.Entity("Backend.Models.VietnamProvinces.Ward", b =>
                {
                    b.HasOne("Backend.Models.VietnamProvinces.District", "district")
                        .WithMany("wards")
                        .HasForeignKey("districtid");

                    b.Navigation("district");
                });

            modelBuilder.Entity("Backend.Models.Branch", b =>
                {
                    b.Navigation("branch_contact_details");

                    b.Navigation("reviews");

                    b.Navigation("rooms");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Backend.Models.BranchContact", b =>
                {
                    b.Navigation("branch_contact_details");
                });

            modelBuilder.Entity("Backend.Models.Facility", b =>
                {
                    b.Navigation("facilities_rooms");
                });

            modelBuilder.Entity("Backend.Models.Reservation", b =>
                {
                    b.Navigation("reservation_details");
                });

            modelBuilder.Entity("Backend.Models.Room", b =>
                {
                    b.Navigation("facilities_rooms");

                    b.Navigation("room_images");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("reservations");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("Backend.Models.VietnamProvinces.District", b =>
                {
                    b.Navigation("wards");
                });

            modelBuilder.Entity("Backend.Models.VietnamProvinces.Province", b =>
                {
                    b.Navigation("districts");
                });
#pragma warning restore 612, 618
        }
    }
}
